// Code generated by MockGen. DO NOT EDIT.
// Source: ../ports/ports.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/jbactad/loop/domain"
)

// MockSurveyProvider is a mock of SurveyProvider interface.
type MockSurveyProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSurveyProviderMockRecorder
}

// MockSurveyProviderMockRecorder is the mock recorder for MockSurveyProvider.
type MockSurveyProviderMockRecorder struct {
	mock *MockSurveyProvider
}

// NewMockSurveyProvider creates a new mock instance.
func NewMockSurveyProvider(ctrl *gomock.Controller) *MockSurveyProvider {
	mock := &MockSurveyProvider{ctrl: ctrl}
	mock.recorder = &MockSurveyProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSurveyProvider) EXPECT() *MockSurveyProviderMockRecorder {
	return m.recorder
}

// GetSurveys mocks base method.
func (m *MockSurveyProvider) GetSurveys(ctx context.Context, limit, offset int) ([]*domain.Survey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSurveys", ctx, limit, offset)
	ret0, _ := ret[0].([]*domain.Survey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSurveys indicates an expected call of GetSurveys.
func (mr *MockSurveyProviderMockRecorder) GetSurveys(ctx, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSurveys", reflect.TypeOf((*MockSurveyProvider)(nil).GetSurveys), ctx, limit, offset)
}
